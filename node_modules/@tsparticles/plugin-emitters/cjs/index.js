"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadEmittersPlugin = void 0;
const engine_1 = require("@tsparticles/engine");
const Emitter_js_1 = require("./Options/Classes/Emitter.js");
const Emitters_js_1 = require("./Emitters.js");
const ShapeManager_js_1 = require("./ShapeManager.js");
class EmittersPlugin {
    constructor(engine) {
        this._engine = engine;
        this.id = "emitters";
    }
    getPlugin(container) {
        return new Emitters_js_1.Emitters(this._engine, container);
    }
    loadOptions(options, source) {
        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
            return;
        }
        if (source?.emitters) {
            options.emitters = (0, engine_1.executeOnSingleOrMultiple)(source.emitters, (emitter) => {
                const tmp = new Emitter_js_1.Emitter();
                tmp.load(emitter);
                return tmp;
            });
        }
        const interactivityEmitters = source?.interactivity?.modes?.emitters;
        if (interactivityEmitters) {
            if ((0, engine_1.isArray)(interactivityEmitters)) {
                options.interactivity.modes.emitters = {
                    random: {
                        count: 1,
                        enable: true,
                    },
                    value: interactivityEmitters.map((s) => {
                        const tmp = new Emitter_js_1.Emitter();
                        tmp.load(s);
                        return tmp;
                    }),
                };
            }
            else {
                const emitterMode = interactivityEmitters;
                if (emitterMode.value !== undefined) {
                    if ((0, engine_1.isArray)(emitterMode.value)) {
                        options.interactivity.modes.emitters = {
                            random: {
                                count: emitterMode.random.count ?? 1,
                                enable: emitterMode.random.enable ?? false,
                            },
                            value: emitterMode.value.map((s) => {
                                const tmp = new Emitter_js_1.Emitter();
                                tmp.load(s);
                                return tmp;
                            }),
                        };
                    }
                    else {
                        const tmp = new Emitter_js_1.Emitter();
                        tmp.load(emitterMode.value);
                        options.interactivity.modes.emitters = {
                            random: {
                                count: emitterMode.random.count ?? 1,
                                enable: emitterMode.random.enable ?? false,
                            },
                            value: tmp,
                        };
                    }
                }
                else {
                    const emitterOptions = (options.interactivity.modes.emitters = {
                        random: {
                            count: 1,
                            enable: false,
                        },
                        value: new Emitter_js_1.Emitter(),
                    });
                    emitterOptions.value.load(interactivityEmitters);
                }
            }
        }
    }
    needsPlugin(options) {
        if (!options) {
            return false;
        }
        const emitters = options.emitters;
        return (((0, engine_1.isArray)(emitters) && !!emitters.length) ||
            emitters !== undefined ||
            (!!options.interactivity?.events?.onClick?.mode &&
                (0, engine_1.isInArray)("emitter", options.interactivity.events.onClick.mode)));
    }
}
async function loadEmittersPlugin(engine, refresh = true) {
    if (!engine.emitterShapeManager) {
        engine.emitterShapeManager = new ShapeManager_js_1.ShapeManager(engine);
    }
    if (!engine.addEmitterShapeGenerator) {
        engine.addEmitterShapeGenerator = (name, generator) => {
            engine.emitterShapeManager?.addShapeGenerator(name, generator);
        };
    }
    const plugin = new EmittersPlugin(engine);
    await engine.addPlugin(plugin, refresh);
}
exports.loadEmittersPlugin = loadEmittersPlugin;
__exportStar(require("./EmitterContainer.js"), exports);
__exportStar(require("./EmitterShapeBase.js"), exports);
__exportStar(require("./EmittersEngine.js"), exports);
__exportStar(require("./IEmitterShape.js"), exports);
__exportStar(require("./IEmitterShapeGenerator.js"), exports);
__exportStar(require("./Enums/EmitterClickMode.js"), exports);
__exportStar(require("./IRandomPositionData.js"), exports);
